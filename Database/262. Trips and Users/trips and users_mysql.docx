
The Trips table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to the Users_Id at the Users table. Status is an ENUM type of (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’).

+----+-----------+-----------+---------+--------------------+----------+
| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|
+----+-----------+-----------+---------+--------------------+----------+
| 1  |     1     |    10     |    1    |     completed      |2013-10-01|
| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|
| 3  |     3     |    12     |    6    |     completed      |2013-10-01|
| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|
| 5  |     1     |    10     |    1    |     completed      |2013-10-02|
| 6  |     2     |    11     |    6    |     completed      |2013-10-02|
| 7  |     3     |    12     |    6    |     completed      |2013-10-02|
| 8  |     2     |    12     |    12   |     completed      |2013-10-03|
| 9  |     3     |    10     |    12   |     completed      |2013-10-03| 
| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|
+----+-----------+-----------+---------+--------------------+----------+
The Users table holds all users. Each user has an unique Users_Id, and Role is an ENUM type of (‘client’, ‘driver’, ‘partner’).

+----------+--------+--------+
| Users_Id | Banned |  Role  |
+----------+--------+--------+
|    1     |   No   | client |
|    2     |   Yes  | client |
|    3     |   No   | client |
|    4     |   No   | client |
|    10    |   No   | driver |
|    11    |   No   | driver |
|    12    |   No   | driver |
|    13    |   No   | driver |
+----------+--------+--------+
Write a SQL query to find the cancellation rate of requests made by unbanned users (both client and driver must be unbanned) between Oct 1, 2013 and Oct 3, 2013. The cancellation rate is computed by dividing the number of canceled (by client or driver) requests made by unbanned users by the total number of requests made by unbanned users.

For the above tables, your SQL query should return the following rows with the cancellation rate being rounded to two decimal places.

+------------+-------------------+
|     Day    | Cancellation Rate |
+------------+-------------------+
| 2013-10-01 |       0.33        |
| 2013-10-02 |       0.00        |
| 2013-10-03 |       0.50        |
+------------+-------------------+




# Write your MySQL query statement below
SELECT Request_at AS Day, Round(sum(case when status = 'completed' then 0 else 1 end)/count(id),2) AS "Cancellation Rate" 
FROM Trips 
WHERE Client_Id in (SELECT Users_Id FROM Users WHERE Banned = 'No' AND Role = 'client') 
AND Driver_Id in (SELECT Users_Id FROM Users WHERE Banned = 'No' AND Role = 'driver')
AND Request_at BETWEEN '2013-10-01' AND '2013-10-03'
GROUP BY Request_at;


'''
# Write your MySQL query statement below
SELECT Request_at AS Day, ROUND(COUNT(tb4.Id)/COUNT(tb5.Id),2) AS "Cancellation Rate" FROM
    (
    (
    (SELECT * FROM Trips RIGHT JOIN 
    (SELECT * FROM Users WHERE Banned = 'No' AND Role = 'client') tb1
    WHERE Users.Clien_Id = tb1.Users_Id ) tb2 RIGHT JOIN
    (SELECT * FROM Users WHERE Banned = 'No' AND Role = 'driver') tb3
    WHERE tb2.Driver_Id = tb3.Users_Id) tb4
    WHERE tb4.Status != 'completed' AND tb4.Request_at >= '2013-10-01' AND tb4.Request_at <=        '2013-10-03'
    GROUP BY tb4.Request_at

    (
    (
    (SELECT * FROM Trips RIGHT JOIN 
    (SELECT * FROM Users WHERE Banned = 'No' AND Role = 'client') tb1
    WHERE Users.Clien_Id = tb1.Users_Id ) tb2 RIGHT JOIN
    (SELECT * FROM Users WHERE Banned = 'No' AND Role = 'driver') tb3
    WHERE tb2.Driver_Id = tb3.Users_Id) tb5
    WHERE tb5.Request_at >= '2013-10-01' AND tb5.Request_at <= '2013-10-03'
    GROUP BY tb5.Request_at
    
'''    
